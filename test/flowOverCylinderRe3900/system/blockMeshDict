/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7  
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.04185;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(4);
        points[0]  = point(-0.005, 0, 0);
        points[1]  = point(0, 0.005, 0);
        points[2]  = point(0.005, 0, 0);
        points[3]  = point(0, -0.005, 0);

        // outZone
        label sz1 = points.size();
        points.setSize(2*sz1);
        for (label i = 0; i < sz1; i++)
        {
            const point& pt = points[i];
            points[i+sz1] = point(50*pt.x(), 50*pt.y(), pt.z());
        }

        // Duplicate z points
        label sz2 = points.size();
        points.setSize(2*sz2);
        for (label i = 0; i < sz2; i++)
        {
            const point& pt = points[i];
            points[i+sz2] = point(pt.x(), pt.y(), -0.0314);
        }

        os  << points;
    #};
};


blocks
(
    hex (0 4 5 1 8 12 13 9) (150 50 48) 
    simpleGrading 
        (
            (
                (0.01 0.2 15)
                (0.99 0.8 33)
            )
            1
            1
        )
    hex (1 5 6 2 9 13 14 10) (150 50 48) 
    simpleGrading
        (
            (
                (0.01 0.2 15)
                (0.99 0.8 33)
            )
            1
            1
        )
    hex (2 6 7 3 10 14 15 11) (150 50 48) 
    simpleGrading
        (
            (
                (0.01 0.2 15)
                (0.99 0.8 33)
            )
            1
            1
        )
    hex (3 7 4 0 11 15 12 8) (150 50 48) 
    simpleGrading
        (
            (
                (0.01 0.2 15)
                (0.99 0.8 33)
            )
            1
            1
        )
);

edges
(
    arc 0 1 (-3.535533906e-3 3.535533906e-3 0)
    arc 1 2 (3.535533906e-3 3.535533906e-3 0)
    arc 2 3 (3.535533906e-3 -3.535533906e-3 0)
    arc 3 0 (-3.535533906e-3 -3.535533906e-3 0)
    arc 8 9 (-3.535533906e-3 3.535533906e-3 -0.0314)
    arc 9 10 (3.535533906e-3 3.535533906e-3 -0.0314)
    arc 10 11 (3.535533906e-3 -3.535533906e-3 -0.0314)
    arc 11 8 (-3.535533906e-3 -3.535533906e-3 -0.0314)
    arc 4 5 (-0.176776695 0.176776695 0)
    arc 5 6 (0.176776695 0.176776695 0)
    arc 6 7 (0.176776695 -0.176776695 0)
    arc 7 4 (-0.176776695 -0.176776695 0)
    arc 12 13 (-0.176776695 0.176776695 -0.0314)
    arc 13 14 (0.176776695 0.176776695 -0.0314)
    arc 14 15 (0.176776695 -0.176776695 -0.0314)
    arc 15 12 (-0.176776695 -0.176776695 -0.0314)
);

boundary
(

    cylinder
    {
        type            wall;
        faces
        (
            (0 1 9 8)
            (1 2 10 9)
            (2 3 11 10)
            (3 0 8 11)
        );
    }
    sym1
    {
        type            cyclic;
        neighbourPatch sym2;
        faces
        (
            (0 1 5 4)
            (1 2 6 5)
            (2 3 7 6)
            (3 0 4 7)
        );
    }
    sym2
    {
        type            cyclic;
        neighbourPatch sym1;
        faces
        (
            (8 9 13 12)
            (9 10 14 13)
            (10 11 15 14)
            (11 8 12 15)
        );
    }
    inlet
    {
        type            patch;
        faces
        (
            (4 5 13 12)
            (4 7 15 12)
        );
    }
    outlet
    {
        type            patch;
        faces
        (
            (6 5 13 14)
            (6 7 15 14)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
